#include <iostream>
#include <vector>
#include <fstream>
#include <sstream>
#include <string>
#include <limits>

class Task {
public:
    int id;
    std::string title;
    std::string description;
    bool completed;

    Task(int id, const std::string& title, const std::string& description)
        : id(id), title(title), description(description), completed(false) {}

    void display() const {
        std::cout << id << ": " << title << " [" 
                  << (completed ? "Completed" : "Pending") << "]\n";
        if (!description.empty()) {
            std::cout << "   Description: " << description << "\n";
        }
    }
};

class TaskManager {
private:
    std::vector<Task> tasks;
    int nextId;

public:
    TaskManager() : nextId(0) {
        loadFromFile("tasks.txt");
    }

    ~TaskManager() {
        saveToFile("tasks.txt");
    }

    void addTask(const std::string& title, const std::string& description) {
        tasks.emplace_back(nextId++, title, description);
        std::cout << "Task added: " << title << "\n";
    }

    void deleteTask(int id) {
        if (id < 0 || id >= tasks.size()) {
            std::cout << "Invalid task ID.\n";
            return;
        }
        tasks.erase(tasks.begin() + id);
        std::cout << "Task deleted: " << id << "\n";
    }

    void viewTasks() const {
        if (tasks.empty()) {
            std::cout << "No tasks available.\n";
            return;
        }
        for (const auto& task : tasks) {
            task.display();
        }
    }

    void markAsCompleted(int id) {
        if (id < 0 || id >= tasks.size()) {
            std::cout << "Invalid task ID.\n";
            return;
        }
        tasks[id].completed = true;
        std::cout << "Task marked as completed: " << tasks[id].title << "\n";
    }

    void saveToFile(const std::string& filename) const {
        std::ofstream file(filename);
        if (!file) {
            std::cerr << "Error saving to file: " << filename << "\n";
            return;
        }
        for (const auto& task : tasks) {
            file << task.id << ";" << task.title << ";" 
                 << task.description << ";" << task.completed << "\n";
        }
    }

    void loadFromFile(const std::string& filename) {
        std::ifstream file(filename);
        if (!file.is_open()) {
            return; // File doesn't exist, nothing to load
        }
        std::string line;
        while (std::getline(file, line)) {
            std::istringstream iss(line);
            std::string title, description;
            bool completed;
            char sep;
            iss >> id >> sep >> std::ws;
            std::getline(iss, title, ';');
            std::getline(iss, description, ';');
            iss >> completed;
            tasks.emplace_back(id, title, description);
            if (completed) tasks.back().completed = true;
            nextId = std::max(nextId, id + 1);
        }
    }

    void displayMenu() const {
        std::cout << "\n--- Task Manager ---\n";
        std::cout << "1. Add Task\n";
        std::cout << "2. View Tasks\n";
        std::cout << "3. Mark Task as Completed\n";
        std::cout << "4. Delete Task\n";
        std::cout << "5. Exit\n";
    }

    void handleUserChoice(int choice) {
        std::string title, description;
        int id;

        switch (choice) {
            case 1:
                std::cout << "Enter task title: ";
                std::cin.ignore();
                std::getline(std::cin, title);
                std::cout << "Enter task description: ";
                std::getline(std::cin, description);
                addTask(title, description);
                break;
            case 2:
                viewTasks();
                break;
            case 3:
                std::cout << "Enter task ID to mark as completed: ";
                std::cin >> id;
                markAsCompleted(id);
                break;
            case 4:
                std::cout << "Enter task ID to delete: ";
                std::cin >> id;
                deleteTask(id);
                break;
            case 5:
                std::cout << "Exiting...\n";
                exit(0);
            default:
                std::cout << "Invalid option. Please try again.\n";
        }
    }

    void run() {
        int choice;
        while (true) {
            displayMenu();
            std::cout << "Choose an option: ";
            while (!(std::cin >> choice)) {
                std::cin.clear(); // Clear error flag
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Ignore invalid input
                std::cout << "Invalid input. Please enter a number: ";
            }
            handleUserChoice(choice);
        }
    }
};

int main() {
    TaskManager manager;
    manager.run();
    return 0;
}
